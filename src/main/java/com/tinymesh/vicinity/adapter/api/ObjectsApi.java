package com.tinymesh.vicinity.adapter.api;
/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

import com.tinymesh.vicinity.adapter.model.ExecActionPayload;
import com.tinymesh.vicinity.adapter.model.ObjectInfo;
import com.tinymesh.vicinity.adapter.model.PropertyValue;
import com.tinymesh.vicinity.adapter.model.SetPropertyValue;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-03-12T13:15:43.539Z")

@Api(value = "objects", description = "the objects API")
public interface ObjectsApi {

    @ApiOperation(value = "", nickname = "executeObjectAction", notes = "Performs an action on an available IoT object", response = PropertyValue.class, authorizations = {
            @Authorization(value = "basicAuth")
    }, tags={ "Consumption service", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "A task to perform the action was submitted", response = PropertyValue.class) })
    @RequestMapping(value = "/objects/{oid}/actions/{aid}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<PropertyValue> executeObjectAction(@ApiParam(value = "Infrastructure specific identifier of the IoT object",required=true) @PathVariable("oid") UUID oid,@ApiParam(value = "Action identifier (as in object description) (e.g. switch)",required=true) @PathVariable("aid") String aid,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ExecActionPayload body);


    @ApiOperation(value = "", nickname = "getObjectActionStatus", notes = "Retrieves an actual action status of an available IoT object", response = PropertyValue.class, authorizations = {
            @Authorization(value = "basicAuth")
    }, tags={ "Consumption service", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "A task to perform the action was submitted", response = PropertyValue.class) })
    @RequestMapping(value = "/objects/{oid}/actions/{aid}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<PropertyValue> getObjectActionStatus(@ApiParam(value = "Infrastructure specific identifier of the IoT object",required=true) @PathVariable("oid") UUID oid,@ApiParam(value = "Action identifier (as in object description) (e.g. switch)",required=true) @PathVariable("aid") String aid);


    @ApiOperation(value = "", nickname = "getObjectProperty", notes = "Gets the property value of an available IoT object", response = PropertyValue.class, authorizations = {
            @Authorization(value = "basicAuth")
    }, tags={ "Consumption service", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Latest property value", response = PropertyValue.class) })
    @RequestMapping(value = "/objects/{oid}/properties/{pid}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<PropertyValue> getObjectProperty(@ApiParam(value = "Infrastructure specific identifier of the IoT object",required=true) @PathVariable("oid") UUID oid,@ApiParam(value = "Property identifier (as in object description) (e.g. temp1)",required=true) @PathVariable("pid") String pid);


    @ApiOperation(value = "", nickname = "getObjects", notes = "Returns all available IoT objects managed by VICINITY Adapter.", response = ObjectInfo.class, responseContainer = "List", authorizations = {
            @Authorization(value = "basicAuth")
    }, tags={ "Registry service", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "All VICINITY IoT objects that are maintained by the adapter.", response = ObjectInfo.class, responseContainer = "List") })
    @RequestMapping(value = "/objects",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<ObjectInfo>> getObjects();


    @ApiOperation(value = "", nickname = "setObjectProperty", notes = "Sets the property value of an available IoT object", response = PropertyValue.class, authorizations = {
            @Authorization(value = "basicAuth")
    }, tags={ "Consumption service", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Latest property value", response = PropertyValue.class) })
    @RequestMapping(value = "/objects/{oid}/properties/{pid}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<PropertyValue> setObjectProperty(@ApiParam(value = "Infrastructure specific identifier of the IoT object",required=true) @PathVariable("oid") UUID oid,@ApiParam(value = "Property identifier (as in object description) (e.g. temp1)",required=true) @PathVariable("pid") String pid,@ApiParam(value = "The value of action to set" ,required=true )  @Valid @RequestBody SetPropertyValue body);

}
